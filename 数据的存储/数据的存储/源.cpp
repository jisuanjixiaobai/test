//数据的存储
//c语言类型：内置类型（int char short long......）和自定义（构造）类型

//类型的意义：1-使用这个类型开辟内存空间的大小（大小决定了使用范围） 2-如何看待内存空间的视角

//构造类型：1-数组类型  2-结构体类型  3-枚举类型（enum）  4-联合类型
 
//指针类型--int*  char*
//空类型
//#include<stdio.h>
//void test(void)//如果不需要传参，那么（）里面加上void就行
//{
//	printf("hehe\n");
//}
//int main()
//{
//	test();
//
//	return 0;
//}

//整型在内存中的存储：对于整型来说，数据存放内存中其实存放的是补码

//指针类型的意义：
//1.指针类型决定了指针解引用操作的能访问几个字节：char* p;*p访问了1个字节，  int*p;*p访问了4个字节
//2.指针类型决定了指针+1，-1，加的或者减的是几个字节；char* p;p+1跳过了一个字符，  int* p;p+1跳过了一个整形--4个字节

//#include<stdio.h>
//int main()
//{
//	char a = -1;
//	//-1的补码是全1；
//	//类型转换为char，只取后8位
//	//11111111
//	//当往回解析的时候，进行类型提升
//	//因为有符号位，所以在前面补满符号位，即11111111111111111111111111111111
//	signed char b = -1;
//	//11111111
//	//这个提升之后也一样是11111111111111111111111111111111
//	unsigned char c = -1;
//	//11111111
//	//这个因为是无符号位，所以在前面补0直至32位00000000000000000000000011111111
//	//解析过后就是255
//	printf("a=%d,b=%d,c=%d", a, b, c);
//	//a = -1  b = -1  c = 255
//	return 0;
//}

//无符号的char范围是0-255
//
//#include<stdio.h>
//int main()
//{
//	unsigned int i;
//	for (i = 9;i <= 0;i--)
//	{
//		printf("%u\n", i);//无符号数最小值也是0，所以是个死循环了
//	}
//	return 0;
//}

//char可以表示的范围是-128到127，当数字到达-128时，就回到127，重新循环
#include<stdio.h>
#include<string.h>
//int main()
//{
//	char a[1000];//下标0到999。char能表示的数只有-128到127，所以别的数也会被转化到这个范围内
//	int i;
//	for (i = 0;i < 1000;i++)
//	{
//		a[i] = -1 - i;//-1到-128；从-129开始被char循环到127，继续减，一直循环
//	}
//	printf("%d ", strlen(a));//strlen计算字符串大小看到\0也就是0才结束，所以当char循环到0的时候停止计算，结果是127+128=255
//	return 0;
//}

//浮点型在数据中的存储

































































































































































































